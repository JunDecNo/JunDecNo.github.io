<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker的基本使用</title>
      <link href="/2023/10/08/Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/10/08/Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-概述"><a href="#Docker-概述" class="headerlink" title="Docker 概述"></a>Docker 概述</h2><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><pre><code>环境准备</code></pre><p>docker一般是运行在linux系统上的.<br>如果在windows上运行, 需要使用windows自带的wsl服务</p><pre><code> 环境查看</code></pre><p>[root@192 ~]# uname -r<br>5.14.0-325.el9.x86_64</p><pre><code>安装</code></pre><ol><li>卸载旧版本docker</li><li>安装, 使用仓库安装<ol><li><code>sudo yum install -y yum-utils</code> 安装依赖</li><li>设置镜像的仓库 本文使用阿里云</li><li><code>yum install docker-ce docker-ce-cli containerd.io</code></li><li>启动docker <code>systemctl start docker</code></li><li>使用<code>docker version</code>查看是否安装成功</li></ol></li></ol><pre class=" language-shell"><code class="language-shell">docker run <container-name> #运行docker环境,如果本地没有,就回去network上pulldocker images # 查看docker的环境REPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    9c7a54a9a43c   2 months ago   13.3kB</code></pre><h3 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h3><ol><li>登录阿里云找到容器服务<img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202307300431335.png"></li><li>找镜像加速地址<img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202307300432557.png"></li><li>配置具体环境, 复制代码运行即可</li></ol><pre class=" language-shell"><code class="language-shell">sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json <<-'EOF' { "registry-mirrors": ["https://5qn4r3mz.mirror.aliyuncs.com"] }EOF sudo systemctl daemon-reload sudo systemctl restart docker</code></pre><p>这样就可以使用阿里云加速docker hub了. </p><h3 id="Docker底层原理"><a href="#Docker底层原理" class="headerlink" title="Docker底层原理"></a>Docker底层原理</h3><p>Docker是一个CLient-Server结构的系统, Docker的守护进程运行在主机上, 通过Socker从客户端访问.<br>![[Drawing 2023-07-30 04.40.47.excalidraw]]<br><strong>Docker为什么比VM快</strong><br><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202307300451843.png"><br>Docker层数更少.<br>docker利用宿主机的内核, vm需要系统OS<br>docker依赖于宿主系统, 而vm不需要这样. </p><h2 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><pre class=" language-shell"><code class="language-shell">docker version # 显示docker的版本信息docker info    # 显示docker的系统信息, 包括容器等docker 命令 --help #显示帮助命令</code></pre><p>帮助文档的地址:<a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference | Docker Documentation</a></p><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><p><strong>docker images</strong>显示所有本地的主机上的镜像</p><pre class=" language-shell"><code class="language-shell">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE镜像的仓库源   标签      镜像id         创建时间        大小 </code></pre><p>-a –all 显示所有镜像<br>-q –quiet 只显示id<br><strong>docker search</strong>搜索docker的镜像</p><pre class=" language-shell"><code class="language-shell">NAME                            DESCRIPTION                                      STARS     OFFICIAL   AUTOMATEDmysql                           MySQL is a widely used, open-source relation…   14338     [OK]       mariadb                         MariaDB Server is a high performing open sou…   5474      [OK]       percona                         Percona Server is a fork of the MySQL relati…   618       [OK]       phpmyadmin                      phpMyAdmin - A web interface for MySQL and M…   840       [OK]      bitnami/mysql                   Bitnami MySQL Docker Image                       93                   [OK]</code></pre><p>–filter=&lt;筛选条件&gt; 类似于Github的搜索方式<br><strong>docker pull</strong>下载远程的docker镜像</p><pre class=" language-shell"><code class="language-shell">[root@192 ~]# docker pull mysql # 不写tag就下载最新Using default tag: latest# docker下载采用分层下载72a69066d2fe: Pull complete 93619dbc5b36: Pull complete 99da31dd6142: Pull complete 626033c43d70: Pull complete 37d5d7efb64e: Pull complete ac563158d721: Pull complete d2ba16033dad: Pull complete 688ba7d5c01a: Pull complete 00e060b6d11d: Pull complete 1c04857f594f: Pull complete 4d7cfa90e6ea: Pull complete e0431212d27d: Pull complete Digest: sha256:e9027fe4d91c0153429607251656806cc784e914937271037f7738bd5b8e7709  #签名Status: Downloaded newer image for mysql:latestdocker.io/library/mysql:lates= # 真实地址</code></pre><pre><code>分层下载,如果存在相同的内容,就公用后不再下载指定标签的命令 `docker pull MySQL:5.0.7`</code></pre><p><strong>docker rmi</strong>删除镜像</p><pre class=" language-shell"><code class="language-shell">docker rmi -f 容器的id-1 <容器的id-2> ...docker rmi -f $(docker images -aq) # 删除所有的容器<docker images -aq>返回所有的容器id,这样就可以全部删除了. </code></pre><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p>说明: 有了镜像才可以创建容器, 本次使用centos测试<br>==容器和镜像的区别?==[[01-ToolQuestion#Docker容器和镜像的关系]]</p><pre class=" language-shell"><code class="language-shell">docker pull centos</code></pre><p><strong>新建容器并启动</strong></p><pre class=" language-shell"><code class="language-shell">docker run [可选参数] image# 参数说明--name="Name" 容器名字 xxxx-d            后台运行方式-it           使用交互方式运行, 进入容器查看内容-p            指定容器端口 -p     -p 主机端口:容器端口(常用)    -p 容器端口    -p IP:主机端口:容器端口-P            随机指定端口-rm           用完就删除#测试启动并进入容器docker run -it centos /bin/bash # -it表示使用交互方式, /bin/bash表示使用终端#退出容器的命令exit</code></pre><p><strong>列出所有的启动的容器</strong></p><pre class=" language-shell"><code class="language-shell"># docker ps 显示当前正在运行的容器 -a显示历史所有的容器# -n=? 显示容器的后?个容器# -q 显示编号# [root@192 ~]# docker ps -a CONTAINER ID   IMAGE         COMMAND       CREATED         STATUS                     PORTS     NAMES0f1c67f488b4   centos        "/bin/bash"   3 minutes ago   Exited (0) 3 seconds ago             cranky_hypatiaebb882b6736d   hello-world   "/hello"      32 hours ago    Exited (0) 32 hours ago              nice_wright</code></pre><p><strong>退出容器</strong></p><pre class=" language-shell"><code class="language-shell">exit # 退出容器Ctrl + P + Q # 容器不停止退出</code></pre><p><strong>删除容器</strong></p><pre class=" language-shell"><code class="language-shell">docker rm 容器iddocker rm -f $(docker ps -aq) # 删除所有容器docker ps -aq | xargs docker rm # 删除所用容器 利用管道特性</code></pre><p><strong>启动和停止容器</strong></p><pre class=" language-shell"><code class="language-shell">docker start 容器iddocker restart 容器iddocker stop 容器iddocker kill 容器id</code></pre><h3 id="常用的其他命令"><a href="#常用的其他命令" class="headerlink" title="常用的其他命令"></a>常用的其他命令</h3><p><strong>后台启动容器</strong></p><pre class=" language-sh"><code class="language-sh">[root@192 ~]# docker run -d centos73adc1fab09efd6a57f7a87d640ea180b826231c78a3795b9329380076b3903b[root@192 ~]# docker ps CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES# 命令 docker run -d 容器id会出现ps无法看到容器# docker容器使用后台运行, 就必须要使用一个前台进程, 如果没有应用, 则自动停止</code></pre><p><strong>查看日志命令</strong></p><pre class=" language-sh"><code class="language-sh">docker logsdocker logs -ft --tail number 容器id# 例子 显示后十条日志docker logs -ft --tail 10 id名</code></pre><blockquote><p>docker run  -d 镜像名  -c “&lt;shell命令&gt;”</p></blockquote><p><strong>查看容器中的进程信息</strong></p><pre class=" language-sh"><code class="language-sh">docker top 容器id #查看容器id的进程信息</code></pre><p><strong>查看镜像的元数据</strong></p><pre class=" language-sh"><code class="language-sh">docker inspect 容器id # 查看容器id的元数据</code></pre><p><strong>进入当前正在运行的容器</strong></p><pre class=" language-sh"><code class="language-sh"># 方式一 docker execdocker exec -it 容器id /bin/bash# 方式二 docker attachdocker attach 容器id /bin/bash</code></pre><blockquote><p>二者的区别:<br>    dcoker exec -it 进入操作终端<br>    docker attach 进入正在执行界面, 无法进行操作</p></blockquote><p><strong>从容器来复制文件到主机</strong></p><pre class=" language-sh"><code class="language-sh">docker copy 容器id:容器内的路径 主机路径[root@192 ~]# docker cp ed34aece5e5d:/home/copy.cpp /homeSuccessfully copied 1.54kB to /home</code></pre><blockquote><p>同时, 我们可以使用-v的可选参数, 实现自动同步的功能. v = volume</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308010854237.png" alt="image.png"><br><strong>端口暴露</strong><br>![[Drawing 2023-08-01 12.07.12.excalidraw]]</p><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><ul><li>portainer</li></ul><pre class=" language-sh"><code class="language-sh">docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</code></pre><p><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308021219218.png" alt="image.png"></p><p><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308021223315.png" alt="image.png"><br><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308021224373.png" alt="image.png"></p><blockquote><p>portainer可以很方便的查看镜像容器的信息</p></blockquote><h2 id="Docker镜像讲解"><a href="#Docker镜像讲解" class="headerlink" title="Docker镜像讲解"></a>Docker镜像讲解</h2><h3 id="docker镜像加载原理"><a href="#docker镜像加载原理" class="headerlink" title="docker镜像加载原理"></a>docker镜像加载原理</h3><blockquote><p>联合文件系统</p></blockquote><p>分层 轻量 高效的文件系统UnionFS. 其实就是可以通过逐步添加的方式进行更新</p><p><strong>bootfs</strong>主要包含bootloader和kernel. bootloader主要是引导加载kernel, Linux启动就会运行bootfs, 即引导层<br><strong>rootfs</strong>就是各种不同操作系统的发行版, 包含基础的命令.<br><strong>bootfs+rootfs</strong>镜像就是更新<strong>rootfs</strong>就可以了.</p><p>比如对于一个pull过来的镜像, 当我们实例化后, 就会在镜像层上生成一个容器层, 进行commit的时候会同时进行一次修改<br>就是相当于在原有的镜像上修改. 镜像为不可更改. </p><h3 id="commit-镜像"><a href="#commit-镜像" class="headerlink" title="commit 镜像"></a>commit 镜像</h3><pre class=" language-sh"><code class="language-sh">docker commit docker commit -m="提交的描述信息" -a="作者" 容器id name:tag# 示例$ docker commit -a="JunDecNo" -m="tomcat initial webapps" tomcat9 tomcati:0.1.1sha256:27a2df35a29460d6da20c3e3ac77df9d4b22ba9cd67fc36d8b28bfffa492b8cf[root@192 ~]# docker imagesREPOSITORY            TAG       IMAGE ID       CREATED          SIZEtomcati               0.1.1     27a2df35a294   25 seconds ago   685MB</code></pre><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><blockquote><p>存在的问题: 如果将数据都放在容器里, 如果容器删除了那么数据就丢失了<br>    就需要在删除容器的时候数据依旧保存在本地<br>同时多个容器也可以使用同一个目录,实现数据共享. 这样就可以实现运行和数据分离</p></blockquote><p><strong>方式一: 使用-v方式</strong></p><pre class=" language-sh"><code class="language-sh">-v 宿主机目录:容器目录#例如$ docker run -it -v /home/volume:/home/ centos ctos /bin/bash</code></pre><p><strong>样例图</strong><br><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308031104561.png" alt="image.png"><br>Mysql实战[[Docker作业#作业四 MySql同步]]</p><h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><p><strong>匿名挂载</strong></p><pre class=" language-sh"><code class="language-sh"># 匿名挂载$ docker run -d -p 3310:3306 --name mysql02 -v /etc/mysql/conf.d mysql</code></pre><blockquote><p>匿名挂载就是直接指定容器内的文件路径.<br>并没有给volume起名字. 那么到底挂载在哪里呢?<br><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308041457352.png" alt="image.png"></p></blockquote><p><strong>具名挂载</strong></p><pre class=" language-sh"><code class="language-sh"># 具名挂载$ docker run -d -p 3310:3306 --name mysql03 -v name:/etc/mysql/data mysql</code></pre><blockquote><p>具名挂载就是容器具有具体的名字<br><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308041459386.png" alt="image.png"></p></blockquote><pre class=" language-sh"><code class="language-sh">[root@192 mysql]# docker volume inspect centOS[    {        "CreatedAt": "2023-08-04T14:58:52+08:00",        "Driver": "local",        "Labels": null,        "Mountpoint": "/var/lib/docker/volumes/centOS/_data",        "Name": "centOS",        "Options": null,        "Scope": "local"    }]</code></pre><blockquote><p>可以看到docker的卷存放在宿主机的<code>\var\lib\docker\volumes</code>中<br><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308041501338.png" alt="image.png"><br><strong>总结</strong></p></blockquote><pre class=" language-sh"><code class="language-sh"># 匿名-v 容器内路径-v 名称:容器内路径-v 宿主机绝对路径:容器内路径</code></pre><blockquote><p>同时可以修改读取权限<br>ro 只读<br>rw 可读可写</p></blockquote><p><code>docker run -v name:path:[ro|rw] centos</code><br><strong>方式二: 通过DockerFile</strong><br>通过脚本构建文件<br>dockerl file</p><pre class=" language-sh"><code class="language-sh">FROM centosVOLUME ["volume01","volume02"] # 匿名挂载CMD echo "------------end---------------"CMD /bin/bash</code></pre><p>docker build</p><pre class=" language-sh"><code class="language-sh">docker build -f dockerfile1 -t centos .</code></pre><blockquote><p>-t表示构建的name:tag<br><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308041818028.png" alt="image.png"><br><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308041830265.png" alt="image.png"></p></blockquote><p><strong>数据卷同步数据</strong><br>容器与容器之间同步</p><ul><li>先申明一个容器, 之后再实例化容器时进行绑定<code>docker run -it --name docker01 --volumes-from docker02 jentos</code><blockquote><p>container1 volumes-from container2<br>container1就实现了与container2数据共享</p></blockquote></li></ul><p>数据卷同步在删除container2时container1的共享卷仍然可以运行<br><em>其实就是container2和container1对应宿主机中的同一个挂载卷, 只要宿主机中不删除那就依然可以使用</em></p><p>这里就有个问题了, 共享卷共享的是哪部分?<br>针对一样的两个centos系统.<br><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308050025225.png" alt="image.png"></p><p><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308050025038.png" alt="image.png"></p><blockquote><p>可以看到挂载的信息时一直的.<br>所以在使用volumes-from 就是复制container的挂载信息. 所以也会同步这两个文件<br>如果<strong>没有挂载信息那就不存在同步</strong><br>存在挂载信息, 就会新建目录</p></blockquote><pre class=" language-sh"><code class="language-sh">[root@192 ~]# docker run -it --name docker03 --volumes-from docker02 centos[root@a7298952d2d9 /]# lsbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01  volume02</code></pre><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><p><strong>DockerFile时构建Docker image的文件</strong><br>docker的构建步骤:</p><ol><li>编写一个dockerfile文件</li><li>docker build 构建镜像</li><li>docker run 运行镜像</li><li>docker push 发布镜像</li></ol><h3 id="Docker的构建过程"><a href="#Docker的构建过程" class="headerlink" title="Docker的构建过程"></a>Docker的构建过程</h3><ol><li>每个关键字必须大写</li><li>顺序执行</li><li><h1 id="表示注释"><a href="#表示注释" class="headerlink" title="表示注释"></a>表示注释</h1></li><li>每个指令都会提交一个新的镜像层</li></ol><h3 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h3><p><img src="https://i.bmp.ovh/imgs/2022/03/800e39c60291da56.png"></p><pre class=" language-sh"><code class="language-sh">CMD          # 指定容器启动后的命令,会被替代ENTRYPOINT   # 与CMD类似, 但可以追加命令ONBUILD      # 运行DockerFile就会触发COPY         # 类似ADD, 拷贝文件ENV          # 构建的时候设置环境变量</code></pre><p>[[Docker作业#作业五 实战DockerFile]]</p><blockquote><p>可以通过docker history 查看容器构建历史</p></blockquote><h3 id="CMD和ENTRYPOINT的区别"><a href="#CMD和ENTRYPOINT的区别" class="headerlink" title="CMD和ENTRYPOINT的区别"></a>CMD和ENTRYPOINT的区别</h3><pre class=" language-sh"><code class="language-sh">FROM centosCMD ["ls", "-a"]ENTRYPOINT ["ls", "-a"]</code></pre><p><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308050145505.png" alt="image.png"></p><blockquote><p>只有最后一个CMD会生效<br><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308050200633.png" alt="image.png"><br>ENTRYPOINT的-l可以追加 而CMD会报错</p></blockquote><p>实战Tomcat[[Docker作业#作业六 实战Tomcat]]</p><h3 id="发布镜像到dockerhub"><a href="#发布镜像到dockerhub" class="headerlink" title="发布镜像到dockerhub"></a>发布镜像到dockerhub</h3><pre class=" language-sh"><code class="language-sh">docker login --helpOptions:  -p, --password string   Password      --password-stdin    Take the password from stdin  -u, --username string   Usernamedocker login -u jundecnoWARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeeded[root@192 ~]# docker push jundecno/tomcat:latestThe push refers to repository [docker.io/jundecno/tomcat]5f70bf18a086: Pushed 67ffe5d1bc00: Pushed 67e24e94fed1: Pushed 74ddd0ec08fa: Pushed latest: digest: sha256:0593dbe646f6c41d4b305d5aaf83bab1949f15a7bd893a1e9caa10cbea92f3fd size: 1160</code></pre><p><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308051634898.png" alt="image.png"></p><h3 id="发布到阿里云"><a href="#发布到阿里云" class="headerlink" title="发布到阿里云"></a>发布到阿里云</h3><ol><li>登录阿里云</li><li>找到镜像服务</li><li>创建命名空间<img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308051641869.png" alt="image.png"></li><li>创建镜像仓库<img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308051643244.png" alt="image.png"></li><li>浏览阿里云<img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308051647721.png" alt="image.png"></li></ol><pre class=" language-sh"><code class="language-sh">[root@jundecno ~]$ docker login --username=lucaxzzz registry.cn-hangzhou.aliyuncs.com# 需要重新命令[root@192 ~]$ docker tag 39251683c4fd  registry.cn-hangzhou.aliyuncs.com/jundecno/test-jun:1.0# push[root@192 ~]$ docker push registry.cn-hangzhou.aliyuncs.com/jundecno/test-jun:1.0The push refers to repository [registry.cn-hangzhou.aliyuncs.com/jundecno/test-jun]5f70bf18a086: Pushed 67ffe5d1bc00: Pushed 67e24e94fed1: Pushed 74ddd0ec08fa: Pushed 1.0: digest: sha256:0593dbe646f6c41d4b305d5aaf83bab1949f15a7bd893a1e9caa10cbea92f3fd size: 1160</code></pre><p><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308051658607.png" alt="image.png"></p><blockquote><p>阿里云的镜像仓库和dokcer hub的上传push类似<br>阿里云真的很不错. 点赞</p></blockquote><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><img src="https://jsd.cdn.zzko.cn/gh/jundecno/imagerepo@main/Blogs/MarkDown/202308051703566.png" alt="image.png"></p><h2 id="Docker-Network"><a href="#Docker-Network" class="headerlink" title="Docker Network"></a>Docker Network</h2><h3 id="理解docker0"><a href="#理解docker0" class="headerlink" title="理解docker0"></a>理解docker0</h3><pre class=" language-sh"><code class="language-sh">4: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default     link/ether 02:42:08:37:ab:e4 brd ff:ff:ff:ff:ff:ff</code></pre><blockquote><p>docker如何处理网络连接</p></blockquote><pre class=" language-sh"><code class="language-sh">[root@192 ~]# docker run -d -P --name tomcat01 tomcat1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever13: eth0@if14: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default     link/ether 02:42:ac:11:00:04 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 172.17.0.4/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever</code></pre><blockquote><p>容器的eth0表示容器的地址</p></blockquote><p>日后再见!</p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
            <tag> 基本使用 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zotero的基本使用</title>
      <link href="/2023/08/06/Zotero%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/08/06/Zotero%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、收集题录"><a href="#一、收集题录" class="headerlink" title="一、收集题录"></a>一、收集题录</h2><h3 id="1、通过浏览器插件进行保存题录"><a href="#1、通过浏览器插件进行保存题录" class="headerlink" title="1、通过浏览器插件进行保存题录"></a>1、通过浏览器插件进行保存题录</h3><p>先点击插件会自动搜索网页中的题录，之后就可以进行保存了。单个文件显示学士帽的图标</p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220729235906121.png" alt="image-20220729235906121"></p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220729235923271.png" alt="image-20220729235923271"></p><blockquote><p>如果弹出一些错误，可以在zotero的官方网站注册一下，并且在zotero里设置同步，就可以解决</p><p>同时插件可以手机pdf文档，因为没有使用学校ip登录所以没有出现pdf文档</p></blockquote><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730000636092.png" alt="image-20220730000636092"></p><p><strong>image-20220730000636092</strong></p><blockquote><p>可以看到zotero方便的提供了很多功能</p></blockquote><h3 id="2、通过标识符添加题录"><a href="#2、通过标识符添加题录" class="headerlink" title="2、通过标识符添加题录"></a>2、通过标识符添加题录</h3><p>支持==ISBN、DOI、PMID、arXiv ID、ADS==</p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730001034333.png" alt="image-20220730001034333"></p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730001324575.png" alt="image-20220730001324575"></p><blockquote><p>同时也可能找不到对应的pdf，可以双击条目会在浏览器中打开对应的网站</p></blockquote><h3 id="3、拖拽文件实现"><a href="#3、拖拽文件实现" class="headerlink" title="3、拖拽文件实现"></a>3、拖拽文件实现</h3><p>将下载好的pdf文献直接拖拽到窗口即可自动提取论文的详细信息等</p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730002136383.png" alt="image-20220730002136383"></p><h3 id="4、通过剪贴板实现"><a href="#4、通过剪贴板实现" class="headerlink" title="4、通过剪贴板实现"></a>4、通过剪贴板实现</h3><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730002449066.png" alt="image-20220730002449066"></p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730002555842.png" alt="image-20220730002555842"></p><blockquote><p>就可以实现导入条目的功能，但是这种方法没有导入pdf，需要另外添加pdf</p></blockquote><p>同时可以批量导入，多选论文，点击RefWorks导出即可</p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730003057173.png" alt="image-20220730003057173"></p><p>另外可以手动添加，但是一般不适用</p><h2 id="二、管理题录"><a href="#二、管理题录" class="headerlink" title="二、管理题录"></a>二、管理题录</h2><h3 id="1、分类"><a href="#1、分类" class="headerlink" title="1、分类"></a>1、分类</h3><p><code>shift+鼠标左键</code>来移动条目或文件夹</p><p><code>鼠标左键</code>则相当于在新的目录下复制的条目</p><p><code>Ctrl</code>高亮文件夹所在目录</p><h3 id="2、查重"><a href="#2、查重" class="headerlink" title="2、查重"></a>2、查重</h3><p>在重复条目中显示出来，可以进行合并</p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730003813104.png" alt="image-20220730003813104"></p><p><strong>image-20220730003813104</strong></p><h3 id="3、关联"><a href="#3、关联" class="headerlink" title="3、关联"></a>3、关联</h3><p>点击文献后可以在右侧选择关联文献，关联文献是相互的，</p><p>mermaid</p><pre class=" language-mermaid"><code class="language-mermaid">graph LRA(A)-->B(B)-->AC(B)-->D(C)-->CE(A)--X-->F(C)--X-->E</code></pre><p>但是关联没有传递性，即只能相互关联，A不会关联到C</p><h3 id="4、标签"><a href="#4、标签" class="headerlink" title="4、标签"></a>4、标签</h3><p>可以对相应的文献设置标签，方便管理，往往在同一个目录下使用。通过标签可以设置颜色，当点击标签时就会显示在对应的文献上</p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730004726544.png" alt="image-20220730004726544"></p><blockquote><p>可以非常快捷的看到含有标签的文献</p><p>在导入文献的时候就会根据关键词来添加标签，同时可以在首选项中关闭</p></blockquote><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730004931567.png" alt="image-20220730004931567"></p><h3 id="5、笔记"><a href="#5、笔记" class="headerlink" title="5、笔记"></a>5、笔记</h3><p>zotero可以记笔记，同时在内置的pdf阅读器中可以高亮文本等一些基础的功能</p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730005440189.png" alt="image-20220730005440189"></p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730005822547.png" alt="image-20220730005822547"></p><blockquote><p>zotero同时可以导出笔记，使用笔记管理软件管理</p></blockquote><h3 id="6、RSS订阅功能"><a href="#6、RSS订阅功能" class="headerlink" title="6、RSS订阅功能"></a>6、RSS订阅功能</h3><p>可以自动抓取文章</p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730010000054.png" alt="image-20220730010000054"></p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730010128354.png" alt="image-20220730010128354"></p><p>自动抓取的结果</p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730010213567.png" alt="image-20220730010213567"></p><h3 id="7、快捷键的使用"><a href="#7、快捷键的使用" class="headerlink" title="7、快捷键的使用"></a>7、快捷键的使用</h3><p>快捷键</p><p>功能</p><p>鼠标左键拖动</p><p>复制文献到新目录</p><p>Shift+鼠标左键拖动</p><p>移动文献到新目录</p><p>Ctrl</p><p>高亮所在目录</p><p>Ctrl+Shift+alt+I</p><p>从剪贴板导入</p><p>Ctrl+T</p><p>切换翻译前后标题</p><ul><li></li></ul><p>展开目录</p><ul><li></li></ul><p>折叠目录</p><h2 id="四、在论文中插入引文"><a href="#四、在论文中插入引文" class="headerlink" title="四、在论文中插入引文"></a>四、在论文中插入引文</h2><h3 id="1、添加引文"><a href="#1、添加引文" class="headerlink" title="1、添加引文"></a>1、添加引文</h3><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730010629048.png" alt="image-20220730010629048"></p><blockquote><p>在安装zotero后会在word中自动安装一个插件，这就是用来探入引文的</p></blockquote><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730010739568.png" alt="image-20220730010739568"></p><p>可以看到并没有中文文献常用的GP/T 7714-2015的样式，可以点击管理样式添加样式，搜索7714，选择加入即可</p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730011056155.png" alt="image-20220730011056155"></p><p>之后会出现zotero的搜索框，输入对应文献信息，也可以使用经典视图加入</p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730011252461.png" alt="image-20220730011252461"></p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730011436014.png" alt="image-20220730011436014"></p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730011447601.png" alt="image-20220730011447601"></p><p><strong>插入多篇文献</strong></p><p>使用经典视图，选择多重来源</p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730011608080.png" alt="image-20220730011608080"></p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730011750222.png" alt="image-20220730011750222"></p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730011832700.png" alt="image-20220730011832700"></p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730011850853.png" alt="image-20220730011850853"></p><blockquote><p>修改引文时，直接选择引文选择<code>Add/Edit Citation</code>进行修改</p><p>使用<code>unlink citations</code>取消引文链接，只保留文本信息</p></blockquote><p><strong>完成！</strong></p><h2 id="五、插件"><a href="#五、插件" class="headerlink" title="五、插件"></a>五、插件</h2><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730013004974.png" alt="image-20220730013004974"></p><p><img src="https://jsd.cdn.zzko.cn/gh/xifaniu/public@main/Blogs/MarkDown/image-20220730013050240.png" alt="image-20220730013050240"></p><blockquote><p>同时也可以直接拖拽</p></blockquote><h3 id="Jasminum-茉莉花-插件"><a href="#Jasminum-茉莉花-插件" class="headerlink" title="Jasminum(茉莉花)插件"></a>Jasminum(茉莉花)插件</h3><ul><li>拆分或合并 Zotero 中条目作者姓和名</li><li>根据知网上下载的文献文件来抓取引用信息（就是根据文件名）</li><li>添加中文PDF/CAJ时，自动拉取知网数据，该功能默认关闭。需要到设置中开启，注意添加的文件名需要含有中文，全英文没有效果（还是根据文件名）</li><li>为知网的学位论文 PDF 添加书签</li><li>更新中文 translators</li><li>拉取文献引用次数，是否核心期刊</li></ul><p><a href="https://github.com/l0o0/jasminum">下载地址</a></p><h3 id="zotero-pdf-translate"><a href="#zotero-pdf-translate" class="headerlink" title="zotero-pdf-translate"></a>zotero-pdf-translate</h3><ul><li>翻译条目标题</li><li>翻译段落</li><li>单词的词典功能</li><li>选中文本，高亮注释，注释中会自动加入翻译内容</li><li>多种翻译引擎可选</li><li>多种语言可翻译</li></ul><p><a href="https://github.com/windingwind/zotero-pdf-translate">下载地址</a></p><h3 id="zotero-style"><a href="#zotero-style" class="headerlink" title="zotero-style"></a>zotero-style</h3><h3 id="zotero-reference"><a href="#zotero-reference" class="headerlink" title="zotero reference"></a>zotero reference</h3>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zotero </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> 基本使用 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
